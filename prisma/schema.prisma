generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//START ** USER
model User {
  id            String        @id @default(uuid())
  healthPackage String?
  tests         String?
  name          String
  email         String        @unique
  gender        String?
  age           String?
  mobile        String?
  password      String
  address       String?
  geoLocation   GeoLocation[]
  distance      String?
  dob           String?
  members       Member[]
}

model GeoLocation {
  id                String              @id @default(uuid())
  lat               String
  long              String
  user              User?               @relation(fields: [userId], references: [id])
  userId            String?
  // AppointmentDetailId String             @unique
  AppointmentDetail AppointmentDetail[]
}

model Member {
  id          String   @id @default(uuid())
  members     String[]
  name        String
  description String
  price       String
  active      Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

//END USER

//  START ** TEST 
model test {
  active         Boolean @default(true)
  homeCollection Boolean @default(false)
  id             String  @id @default(uuid())
  name           String
  outsource      Boolean @default(true)
  plans          Plan[]
  price          String
}

model Plan {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  planeName String
  price     String
  test      test   @relation(fields: [testId], references: [id])
  testId    String
}

//******END TEST************//

model Staff {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  email   String
  phone   String
  address String
  active  Boolean @default(true)
}

model Membership {
  id                String              @id @default(uuid())
  name              String
  description       String
  duration          Int
  active            Boolean             @default(true)
  price             Int
  AppointmentDetail AppointmentDetail[]
}

// ******* SLOT MODEL STARTS FROM HERE*************//
model Slot {
  id         String     @id @default(uuid())
  date       DateTime   @default(now())
  isSelected Boolean?   @default(true) @map("is_selected")
  start      DateTime   @default(now())
  end        DateTime   @default(now())
  slots      SlotTime[]

  @@map("slots")
}

model SlotTime {
  id      String @id @default(uuid())
  allowed Int
  booked  Int
  name    String
  Slot    Slot   @relation(fields: [slotId], references: [id])
  slotId  String

  @@map("slot_Time")
}

model MemberPlan {
  id          String  @id @default(uuid())
  name        String
  price       Int
  descriptiom String
  active      Boolean @default(true)
}

model AppointmentDetail {
  id                                   String              @id @default(uuid())
  healthPackage                        HealthPackage?      @relation(fields: [healthPackageId], references: [id])
  tests                                HealthTest[]
  name                                 String
  email                                String
  gender                               String
  age                                  Int
  dob                                  String
  mobile                               Int
  date                                 String
  time                                 String
  password                             String
  address                              String
  status                               String?
  grandTotal                           Int
  pickupCharge                         Int
  discountAmt                          Int
  uId                                  String?
  geoLocation                          GeoLocation         @relation(fields: [geoLocationId], references: [id])
  geoLocationId                        String              @unique
  membership                           Membership          @relation(fields: [membershipId], references: [id])
  membershipId                         String
  orderDetail                          PaymentOrderSuccess @relation(fields: [paymentOrderSuccessRazorpay_order_id], references: [razorpay_order_id])
  paymentOrderSuccessRazorpay_order_id String
  // images        NzUploadFile[]
  healthPackageId                      String?
}

model HealthPackage {
  id                String              @id @default(uuid())
  name              String
  price             Int
  active            Boolean             @default(true)
  parameters        Int
  healthTests       String[]
  description       String
  AppointmentDetail AppointmentDetail[]
}

model HealthTest {
  id                  String             @id @default(uuid())
  name                String
  price               Int
  active              Boolean            @default(true)
  outsource           Boolean            @default(true)
  homeCollection      Boolean            @default(true)
  plans               TestPricePlan[]
  offerPrice          Int?
  AppointmentDetail   AppointmentDetail? @relation(fields: [appointmentDetailId], references: [id])
  appointmentDetailId String?
}

model TestPricePlan {
  planId       String      @id @default(uuid())
  planName     String
  price        Int
  HealthTest   HealthTest? @relation(fields: [healthTestId], references: [id])
  healthTestId String?
}

model PaymentOrderSuccess {
  razorpay_order_id   String              @id @default(uuid())
  razorpay_payment_id String
  razorpay_signature  String
  AppointmentDetail   AppointmentDetail[]
}
